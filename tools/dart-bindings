#!/bin/bash
#
# This file generates bindings for a Dart project.
#

set -o pipefail
set -e

ROOT="$PWD"
PREFIX="${PREFIX:-$ROOT/build/local}"
CODEGEN_FOLDER=$ROOT/codegen-v2
DART_FOLDER=$ROOT/dart
DART_PROTOBUF_SRC=$DART_FOLDER/include/proto
DART_PROTOBUF_DST=$DART_FOLDER/lib/protobuf

PROTOC=protoc

clear_files() {
    case $1 in
        bindings)
            clear_bindings $2 $3
            ;;
        ffigen)
            clear_ffigen $2
            ;;
        protobuf)
            clear_protobuf $2
            ;;
    esac
}

copy_files() {
    case $1 in
        bindings)
            copy_bindings $2 $3
            ;;
        ffigen)
            copy_ffigen $2 $3
            ;;
    esac
}

clear_bindings() {
    echo "Clearing bindings..."
    local codegen_folder=$1
    local dart_folder=$2
    rm -rf $codegen_folder/bindings/dart
    local trust_wallet=$dart_folder/lib/trust_wallet_core.dart
    if [ -f "$trust_wallet" ]; then
        rm $trust_wallet
    fi
    rm -rf $dart_folder/lib/src/generated
}

copy_bindings() {
    echo "Copying bindings..."
    local codegen_folder=$1
    local dart_folder=$2
    cp $codegen_folder/bindings/dart/trust_wallet_core.dart $dart_folder/lib/
    cp -r $codegen_folder/bindings/dart/generated/ $dart_folder/lib/src/generated/
}

generate_bindings() {
    echo "Generating Dart bindings..."
    pushd $1
    cargo run -- dart
    popd
}

dart_format() {
    echo "Formatting Dart files..."
    local dart_folder=$1
    local max_line_length=$2
    dart format --line-length $max_line_length $dart_folder/lib
    dart format --line-length $max_line_length $dart_folder/lib/src/generated/
    if [ -d $dart_folder/lib/src/generated/enums/ ]; then
        dart format --line-length $max_line_length $dart_folder/lib/src/generated/enums/
    fi
}

clear_ffigen() {
    echo "Clearing FFI genration..."
    local ffigen_bindings=$1/lib/src/bindings/generated_bindings.dart
    if [ -f "$ffigen_bindings" ]; then
        rm $ffigen_bindings
    fi
    rm -rf $1/include/headers
}

generate_protobuf_c() {
    echo "Generating Coins and C protobuf files..."
    local root=$1
    local prefix=$2
    # Generate coins info from registry.json
    $root/codegen/bin/coins

    # Generate Proto interface file
    $PROTOC -I=$prefix/include -I=src/proto --plugin=$prefix/bin/protoc-gen-c-typedef --c-typedef_out include/TrustWalletCore src/proto/*.proto
}

copy_ffigen() {
    echo "Copying FFI genration..."
    local src=$1/include/TrustWalletCore
    local dst=$2/include/headers
    mkdir -p $dst
    cp -r $src/ $dst/
}

ffigen() {    
    echo "FFI genration..."
    local dart_folder=$1

    pushd $dart_folder
    dart run ffigen --config ffigen.yaml
    popd
}

clear_protobuf() {
    echo "Clearing protobuf files..."
    local dart_folder=$1
    rm -rf $dart_folder/include/proto
    rm -rf $dart_folder/lib/protobuf
}

copy_protobuf() {
    echo "Copying protobuf files..."
    local src=$1/src/proto
    local dst=$2/include/proto
    mkdir -p $dst
    cp $src/*.proto $dst/
    mkdir -p $2/lib/protobuf
}

set_protoc_path() {
    local prefix="$1/build/local"
    if  [ -d $prefix ] && \
        [ -d $prefix/include ] && \
        [ -f $prefix/bin/protoc ] 
    then
        export PATH="$prefix/bin":$PATH
    fi
}

generate_protobuf_dart() {
    echo "Generating Dart protobuf files..."
    export PATH=~/.pub-cache/bin:$PATH
    local dart_folder=$2
    local src=$3
    local dst=$4
    pushd $dart_folder    
    $PROTOC  -I=$src --dart_out=$dst $src/**.proto
    popd
}

gen_dart_file_name() {
    echo "Rename generated dart files to snake_case..."
    for file in $1/*.dart; do
        local filename=$(basename "$file" .dart)
        local new_filename=$(echo "$filename" | sed 's/\([a-z]\)\([A-Z]\)/\1_\2/g' | tr '[:upper:]' '[:lower:]')

        mv "$1/$filename.dart" "$1/$new_filename.dart"
    done
}

fix_protobuf_import() {
    echo "Fix protobuf import..."
    local dart_folder=$1
    local dst=$2
    python3 $dart_folder/camel_case_to_snake_case.py $dst
}

main() {
    set_protoc_path $ROOT
    clear_files ffigen $DART_FOLDER
    generate_protobuf_c $ROOT $PREFIX
    copy_files ffigen $ROOT $DART_FOLDER
    ffigen $DART_FOLDER
    clear_files bindings $CODEGEN_FOLDER $DART_FOLDER
    generate_bindings $CODEGEN_FOLDER
    copy_files bindings $CODEGEN_FOLDER $DART_FOLDER
    clear_files protobuf $DART_FOLDER
    copy_protobuf $ROOT $DART_FOLDER
    generate_protobuf_dart $ROOT $DART_FOLDER $DART_PROTOBUF_SRC $DART_PROTOBUF_DST
    gen_dart_file_name $DART_PROTOBUF_DST
    fix_protobuf_import $DART_FOLDER $DART_PROTOBUF_DST
    dart_format $DART_FOLDER 120
    
    echo "done."
}

main